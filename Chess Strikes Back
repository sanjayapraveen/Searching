Ildar and Ivan are tired of chess, but they really like the chessboard, so they invented a new game. The field is a chessboard 2n×2m: it has 2n rows, 2m columns, and the cell in row i and column j is colored white if i+j is even, and is colored black otherwise.

The game proceeds as follows: Ildar marks some of the white cells of the chessboard as unavailable, and asks Ivan to place n×m kings on the remaining white cells in such way, so that there are no kings attacking each other. A king can attack another king if they are located in the adjacent cells, sharing an edge or a corner.

Ildar would like to explore different combinations of cells. Initially all cells are marked as available, and then he has q queries. In each query he either marks a cell as unavailable, or marks the previously unavailable cell as available. After each query he would like to know whether it is possible to place the kings on the available cells in a desired way. Please help him!

Input
The first line of input contains three integers n, m, q (1≤n,m,q≤200000) — the size of the board and the number of queries.

q lines follow, each of them contains a description of a query: two integers i and j, denoting a white cell on the board (1≤i≤2n, 1≤j≤2m, i+j is even). If the cell (i,j) was available before the query, then it becomes unavailable. Otherwise, if the cell was unavailable, it becomes available.

Output
Output q lines, i-th line should contain answer for a board after i queries of Ildar. This line should contain "YES" if it is possible to place the kings on the available cells in the desired way, or "NO" otherwise.

Examples
inputCopy
1 3 3
1 1
1 5
2 4
outputCopy
YES
YES
NO
inputCopy
3 2 10
4 2
6 4
1 3
4 2
6 4
2 2
2 4
1 3
4 4
3 1
outputCopy
YES
YES
NO
NO
YES
YES
NO
YES
YES
NO
Note
In the first example case after the second query only cells (1,1) and (1,5) are unavailable. Then Ivan can place three kings on cells (2,2), (2,4) and (2,6).

After the third query three cells (1,1), (1,5) and (2,4) are unavailable, so there remain only 3 available cells: (2,2), (1,3) and (2,6). Ivan can not put 3 kings on those cells, because kings on cells (2,2) and (1,3) attack each other, since these cells share a corner.
Code:
#include<bits/stdc++.h>
#define pi pair<int,int>
using namespace std;
const int mxn=2e6+6;
multiset<int>ms[mxn];
set<pi>S;
int n,m,Q,mn[mxn],mx[mxn],s[mxn],x,y,p[mxn];
void build(int o,int l,int r){
	mn[o]=2e9;
	if(l==r)p[l]=o;
	else{
		int md=l+r>>1;
		build(o<<1,l,md),build(o<<1|1,md+1,r);
	}
}
void upd(){
	int o=p[x],ls,rs;
	if(x&1){
		if(ms[x].size())mn[o]=*ms[x].begin();
		else mn[o]=2e9;
	}else{
		if(ms[x].size())mx[o]=*ms[x].rbegin();
		else mx[o]=0;
	}
	for(;o>>=1;){
		ls=o<<1,rs=ls|1;
		s[o]=(s[ls] or s[rs] or (mn[ls]<mx[rs]));
		mn[o]=min(mn[ls],mn[rs]);
		mx[o]=max(mx[ls],mx[rs]);
	}
}
int main(){
	ios_base::sync_with_stdio(false);
	cin>>n>>m>>Q;
	build(1,1,n<<1);
	for(;Q--;){
		cin>>x>>y;
		pi now={x,y};
		if(S.count(now)){
			ms[x].erase(ms[x].find(y));
			S.erase(now);
			upd();
		}else{
			ms[x].insert(y);
			S.insert(now);
			upd();
		}
		if(s[1])puts("NO");
		else puts("YES");
	}
}
