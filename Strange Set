You are given an integer n and two sequences a1,a2,…,an and b1,b2,…,bn.

Let's call a set of integers S such that S⊆{1,2,3,…,n} strange, if, for every element i of S, the following condition is met: for every j∈[1,i−1], if aj divides ai, then j is also included in S. An empty set is always strange.

The cost of the set S is ∑i∈Sbi. You have to calculate the maximum possible cost of a strange set.

Input
The first line contains one integer n (1≤n≤3000).

The second line contains n integers a1,a2,…,an (1≤ai≤100).

The third line contains n integers b1,b2,…,bn (−105≤bi≤105).

Output
Print one integer — the maximum cost of a strange set.
Sample input:
9
4 7 3 4 5 6 7 8 13
-2 3 -19 5 -6 7 -8 9 1
Sample output:
16

Program:
#include <bits/stdc++.h>
using namespace std;
#define mp make_pair
#define fr first
#define sc second
long long n,m=0,cr,ma=100,a[3069],da[3069],ls[169],wg[78069],z=0,inf=1e18;vector<pair<long long,long long>> al[3069];bitset<3069> vtd;bool r0;
void ae(long long x,long long y,long long w){wg[m]=w;al[x].push_back({y,m});al[y].push_back({x,m+1});m+=2;}
void dfs(long long x,long long mn)
{
	long long i,sz=al[x].size(),l,p;
	
	vtd[x]=1;
	if(x==n+2)
	{
		z-=mn;
		cr=mn;
		r0=1;
		return;
	}
	for(i=0;i<sz;i++)
	{
		l=al[x][i].fr;
		p=al[x][i].sc;
		if(!vtd[l]&&wg[p])
		{
			dfs(l,min(mn,wg[p]));
			if(r0)
			{
				wg[p]-=cr;
				wg[p^1]+=cr;
				return;
			}
		}
	}
}

int main(){long long i,j;scanf("%lld",&n);for(i=1;i<=n;i++)scanf("%lld",a+i);for(i=1;i<=n;i++)
	{scanf("%lld",da+i);if(da[i]>=0){z+=da[i];ae(n+1,i,da[i]);}else ae(i,n+2,-da[i]);for(j=1;j<=ma;j++)if(a[i]%j==0&&ls[j])ae(i,ls[j],inf);ls[a[i]]=i;}
	for(r0=1;r0;){vtd.reset();r0=0;dfs(n+1,inf);}printf("%lld\n",z);}
input:
2
42 42
-37 13
output:
0
input:
2
42 42
-37 13
output:
13
input:
20
9 9 8 8 4 8 8 5 6 5 9 9 10 9 3 9 10 9 2 1
37896 -13367 -41007 38133 -97639 -23167 -23162 -62879 56477 -68680 59964 8010 -58439 50010 -63502 -89299 -53814 32335 -14590 -19245
output:
198990
input:
20
27 6 6 60 47 97 62 25 67 28 41 93 65 32 16 56 57 53 66 61
84392 -9003 -93200 -52089 4854 -99982 -81560 95957 -35579 -91088 31023 -68447 -41338 -27132 43558 23876 35055 -36267 77633 -94930
output:
294839
input:
20
27 92 17 70 66 97 83 81 5 57 3 64 26 73 93 28 39 74 50 48
-36004 -18023 82328 43397 -79027 -62368 65213 73945 29265 3761 25958 97468 -27601 -36955 12757 -13007 61122 -44041 -89123 -65767
output:
459210
