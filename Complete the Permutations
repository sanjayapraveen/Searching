ZS the Coder is given two permutations p and q of {1, 2, ..., n}, but some of their elements are replaced with 0. The distance between two permutations p and q is defined as the minimum number of moves required to turn p into q. A move consists of swapping exactly 2 elements of p.

ZS the Coder wants to determine the number of ways to replace the zeros with positive integers from the set {1, 2, ..., n} such that p and q are permutations of {1, 2, ..., n} and the distance between p and q is exactly k.

ZS the Coder wants to find the answer for all 0 ≤ k ≤ n - 1. Can you help him?

Input
The first line of the input contains a single integer n (1 ≤ n ≤ 250) — the number of elements in the permutations.

The second line contains n integers, p1, p2, ..., pn (0 ≤ pi ≤ n) — the permutation p. It is guaranteed that there is at least one way to replace zeros such that p is a permutation of {1, 2, ..., n}.

The third line contains n integers, q1, q2, ..., qn (0 ≤ qi ≤ n) — the permutation q. It is guaranteed that there is at least one way to replace zeros such that q is a permutation of {1, 2, ..., n}.

Output
Print n integers, i-th of them should denote the answer for k = i - 1. Since the answer may be quite large, and ZS the Coder loves weird primes, print them modulo 998244353 = 223·7·17 + 1, which is a prime.
Code:
#include<bits/stdc++.h>
#define For(i,j,k)for(int i=(int)(j);i<=(int)(k);i++)
#define Rep(i,j,k)for(int i=(int)(j);i>=(int)(k);i--)
using namespace std;

const int N=255;
const int mo=998244353;
int p[N],q[N],fl[N];
int vis[N],d[N],nxt[N];
int n,no,na,nb,nab,f[N];
int main(){
scanf("%d",&n);
For(i,1,n)scanf("%d",&p[i]);
For(i,1,n)scanf("%d",&q[i]);
int ans=1,cnt=0;
For(i,1,n)
if(p[i]&&q[i])
d[q[i]]++,nxt[p[i]]=q[i];
else if(!p[i]&&!q[i])
ans=1ll*ans*(++cnt)%mo;
else if(!q[i])fl[p[i]]|=1;
else fl[q[i]]|=2;
cnt=0;
For(i,1,n)
if(!d[i]&&!vis[i]){
int j=i;vis[i]=1;
for(;nxt[j]&&!vis[nxt[j]];)
j=nxt[j],vis[j]=1;
if(fl[i]&2)fl[j]&1?++nab:++nb;
else fl[j]&1?++na:++no;
}
For(i,1,n)if(!vis[i]){
cnt++;
for(int j=i;!vis[j];j=nxt[j])vis[j]=1;
}
For(i,1,nab)ans=1ll*ans*max(no+1-i,0)%mo;
f[cnt]=ans;
For(i,1,no+na){
Rep(j,n,1)f[j]=(1ll*f[j]*(i-1)+f[j-1])%mo;
f[0]=0;
}
For(i,1,nb){
Rep(j,n,1)f[j]=(1ll*f[j]*(i-1+no)+f[j-1])%mo;
f[0]=0;
}
For(i,0,n-1)printf("%d ",f[n-i]);
}
