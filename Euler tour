Euler is a little, cute squirrel. When the autumn comes, he collects some reserves for winter. The interesting fact is that Euler likes to collect acorns in a specific way. A tree can be described as n acorns connected by n−1 branches, such that there is exactly one way between each pair of acorns. Let's enumerate the acorns from 1 to n.

The squirrel chooses one acorn (not necessary with number 1) as a start, and visits them in a way called "Euler tour" (see notes), collecting each acorn when he visits it for the last time.

Today morning Kate was observing Euler. She took a sheet of paper and wrote down consecutive indices of acorns on his path. Unfortunately, during her way to home it started raining and some of numbers became illegible. Now the girl is very sad, because she has to present the observations to her teacher.

"Maybe if I guess the lacking numbers, I'll be able to do it!" she thought. Help her and restore any valid Euler tour of some tree or tell that she must have made a mistake.

Input
The first line contains a single integer n (1≤n≤5⋅105), denoting the number of acorns in the tree.

The second line contains 2n−1 integers a1,a2,…,a2n−1 (0≤ai≤n) — the Euler tour of the tree that Kate wrote down. 0 means an illegible number, which has to be guessed.

Output
If there is no Euler tour satisfying the given description, output "no" in the first line.

Otherwise, on the first line output "yes", and then in the second line print the Euler tour which satisfy the given description.

Any valid Euler tour will be accepted, since the teacher doesn't know how exactly the initial tree looks.
Code:
#include<bits/stdc++.h>
using namespace std;
#define gg puts("no"),exit(0)
#define N 1000010
int n,m,a[N],pr[N],sf[N],nt[N],nw=1,c[N],vi[N];
void dl(int x,int y){
	sf[pr[x]]=sf[y];
	pr[sf[y]]=pr[x];
}
int gt(){
	while(vi[nw])nw++;
	if(nw>n)gg;
	vi[nw]=1;
	return nw;
}
void dfs(int l,int r){
	if((r-l)&1)gg;
	for(int i=l;i<=r;i=sf[i])
		while(nt[i]){
			if(nt[i]>r)gg;
			dfs(sf[i],pr[nt[i]]);
			dl(sf[i],nt[i]);
			nt[i]=nt[nt[i]];
		}
	int s=0,ct=0,rt=a[pr[l]];
	for(int i=l;i<=r;i=sf[i]){
		s++;
		ct+=a[i]>0;
	}
	s=(s+1)/2;
	if(ct>s)gg;
	for(int i=sf[l];i<=r;i=sf[i])
		if(!a[i]&&ct<s)a[i]=gt(),ct++;
	if(s==1&&!ct)a[l]=gt();
	for(int i=l;sf[i]<=r;i=sf[i]){
		while(i>l&&sf[i]<=r&&!a[pr[i]]&&a[i]&&a[sf[i]]){
			a[pr[i]]=a[sf[i]];
			dl(i,sf[i]);
			i=pr[pr[i]];
		}
		while(i>=l&&sf[sf[i]]<=r&&a[i]&&a[sf[i]]&&!a[sf[sf[i]]]){
			a[sf[sf[i]]]=a[i];
			dl(sf[i],sf[sf[i]]);
			i=pr[i];
		}
	}
	for(int i=l;i<=r;i=sf[i])
		if(!a[i])a[i]=rt;
}
int main(){
	cin>>n;
	m=n*2-1;
	for(int i=1;i<=m;i++){
		cin>>a[i];
		c[a[i]]++;
	}
	if(a[1]&&a[m]&&a[1]!=a[m])gg;
	a[1]=a[m]=a[1]|a[m];
	for(int i=0;i<=m;i++){
		pr[i]=i-1;
		sf[i]=i+1;
	}
	for(int i=m;i;i--)
		if(a[i]){
			nt[i]=vi[a[i]];
			vi[a[i]]=i;
		}
	dfs(1,m);
	puts("yes");
	for(int i=1;i<=m;i++)
		printf("%d ",a[i]);
	puts("");
	return 0;
}
