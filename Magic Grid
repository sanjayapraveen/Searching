Let us define a magic grid to be a square matrix of integers of size n×n, satisfying the following conditions.

All integers from 0 to (n2−1) inclusive appear in the matrix exactly once.
Bitwise XOR of all elements in a row or a column must be the same for each row and column.
You are given an integer n which is a multiple of 4. Construct a magic grid of size n×n.

Input
The only line of input contains an integer n (4≤n≤1000). It is guaranteed that n is a multiple of 4.

Output
Print a magic grid, i.e. n lines, the i-th of which contains n space-separated integers, representing the i-th row of the grid.

If there are multiple answers, print any. We can show that an answer always exists.
Sample input:
4
Sample output:
8 9 1 13
3 12 7 5
0 2 4 11
6 10 15 14
Note
In the first example, XOR of each row and each column is 13.
Code:
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>
#include<cstdio>
#include<queue>
#include<string>
#include<map>
typedef long long ll;
#define init(x,y) memset((x),(y),sizeof((x)));
using namespace std;
const int _N=2e5+10,mod=1e9+7,INF=0x3f3f3f3f;
int f[1010][1010];
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    // freopen("tp.txt","r",stdin);
    int n,cnt=0;
    cin>>n;
    for(int i=1;i<=n/2;i++){
        for(int j=1;j<=n/2;j++){
            for(int k=1;k<=2;k++){
                for(int l=1;l<=2;l++){
                    f[i*2+k-2][j*2+l-2]=cnt;
                    cnt++;
                }
            }
        }
    }
    for(int i=1;i<=n;i++){
        cout<<f[i][1];
        for(int j=2;j<=n;j++){
            cout<<" "<<f[i][j];
        }
        cout<<'\n';
    }
}
Input
8
Output
0 1 4 5 8 9 12 13
2 3 6 7 10 11 14 15
16 17 20 21 24 25 28 29
18 19 22 23 26 27 30 31
32 33 36 37 40 41 44 45
34 35 38 39 42 43 46 47
48 49 52 53 56 57 60 61
50 51 54 55 58 59 62 63
