The bear has a string s = s 1 s 2... s |s| (record |s| is the string's length), consisting of lowercase English letters. The bear wants to count the number of such pairs of indices i, j (1 ≤ i ≤ j ≤ |s|), that string x(i, j) = s i s i + 1... s j contains at least one string "bear" as a substring.

String x(i, j) contains string "bear", if there is such index k (i ≤ k ≤ j - 3), that s k = b, s k + 1 = e, s k + 2 = a, s k + 3 = r.

Help the bear cope with the given problem.

Input
The first line contains a non-empty string s (1 ≤ |s| ≤ 5000). It is guaranteed that the string only consists of lowercase English letters.

Output
Print a single number — the answer to the problem.

Sample input:
bearbtear
Sample output:
6
In the first sample, the following pairs (i, j) match: (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9).

In the second sample, the following pairs (i, j) match: (1,  4), (1,  5), (1,  6), (1,  7), (1,  8), (1,  9), (1,  10), (1,  11), (2,  10), (2,  11), (3,  10), (3,  11), (4,  10), (4,  11), (5,  10), (5,  11), (6,  10), (6,  11), (7,  10), (7,  11)

Code:
#include <string>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <stdio.h>
#include <cstring>
#include <iostream>
using namespace std;
string Index;
long long ans,Echo;
int main()
{
    cin >> Index;
    if (Index.size() <= 3){
        printf("0");
        return 0;
    }
    for (int x=0;x<Index.size()-3;++x){
            if (Index[x] == 'b' && Index[x+1] == 'e' && Index[x+2] == 'a' && Index[x+3] == 'r'){
                    ans += (x+1)*(Index.size()-x-3)-Echo*(Index.size()-x-3);
                    Echo  = x+1;
            }
    }
    cout << ans;
    return 0;
}
Input
bearaabearc
Output
20
Input
pbearbearhbearzqbearjkterasjhy
Output
291
Input
pbearjbearbebearnbabcffbearbearwubearjezpiorrbearbearjbdlbearbearqbearjbearwipmsbearoaftrsebearzsnqb
Output
4419
Input
bear
Output
1
Input
a
Output
0
