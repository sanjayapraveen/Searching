Koa the Koala has a matrix A of n rows and m columns. Elements of this matrix are distinct integers from 1 to n⋅m (each number from 1 to n⋅m appears exactly once in the matrix).

For any matrix M of n rows and m columns let's define the following:

The i-th row of M is defined as Ri(M)=[Mi1,Mi2,…,Mim] for all i (1≤i≤n).
The j-th column of M is defined as Cj(M)=[M1j,M2j,…,Mnj] for all j (1≤j≤m).
Koa defines S(A)=(X,Y) as the spectrum of A, where X is the set of the maximum values in rows of A and Y is the set of the maximum values in columns of A.

More formally:

X={max(R1(A)),max(R2(A)),…,max(Rn(A))}
Y={max(C1(A)),max(C2(A)),…,max(Cm(A))}
Koa asks you to find some matrix A′ of n rows and m columns, such that each number from 1 to n⋅m appears exactly once in the matrix, and the following conditions hold:

S(A′)=S(A)
Ri(A′) is bitonic for all i (1≤i≤n)
Cj(A′) is bitonic for all j (1≤j≤m)
An array t (t1,t2,…,tk) is called bitonic if it first increases and then decreases.
More formally: t is bitonic if there exists some position p (1≤p≤k) such that: t1<t2<…<tp>tp+1>…>tk.

Help Koa to find such matrix or to determine that it doesn't exist.

Input
The first line of the input contains two integers n and m (1≤n,m≤250)  — the number of rows and columns of A.

Each of the ollowing n lines contains m integers. The j-th integer in the i-th line denotes element Aij (1≤Aij≤n⋅m) of matrix A. It is guaranteed that every number from 1 to n⋅m appears exactly once among elements of the matrix.

Output
If such matrix doesn't exist, print −1 on a single line.

Otherwise, the output must consist of n lines, each one consisting of m space separated integers  — a description of A′.

The j-th number in the i-th line represents the element A′ij.

Every integer from 1 to n⋅m should appear exactly once in A′, every row and column in A′ must be bitonic and S(A)=S(A′) must hold.

If there are many answers print any.

Examples
inputCopy
3 3
3 5 6
1 7 9
4 8 2
outputCopy
9 5 1
7 8 2
3 6 4
inputCopy
2 2
4 1
3 2
outputCopy
4 1
3 2
inputCopy
3 4
12 10 8 6
3 4 5 7
2 11 9 1
outputCopy
12 8 6 1
10 11 9 2
3 4 5 7
Note
Let's analyze the first sample:

For matrix A we have:

Rows:
R1(A)=[3,5,6];max(R1(A))=6
R2(A)=[1,7,9];max(R2(A))=9
R3(A)=[4,8,2];max(R3(A))=8
Columns:
C1(A)=[3,1,4];max(C1(A))=4
C2(A)=[5,7,8];max(C2(A))=8
C3(A)=[6,9,2];max(C3(A))=9
X={max(R1(A)),max(R2(A)),max(R3(A))}={6,9,8}
Y={max(C1(A)),max(C2(A)),max(C3(A))}={4,8,9}
So S(A)=(X,Y)=({6,9,8},{4,8,9})
For matrix A′ we have:

Rows:
R1(A′)=[9,5,1];max(R1(A′))=9
R2(A′)=[7,8,2];max(R2(A′))=8
R3(A′)=[3,6,4];max(R3(A′))=6
Columns:
C1(A′)=[9,7,3];max(C1(A′))=9
C2(A′)=[5,8,6];max(C2(A′))=8
C3(A′)=[1,2,4];max(C3(A′))=4
Note that each of this arrays are bitonic.
X={max(R1(A′)),max(R2(A′)),max(R3(A′))}={9,8,6}
Y={max(C1(A′)),max(C2(A′)),max(C3(A′))}={9,8,4}
So S(A′)=(X,Y)=({9,8,6},{9,8,4})

Code:
#include<bits/stdc++.h>

using namespace std;
#define ll long long

const int N = 252;
int n, m, r, b[N], c[N], a[N][N], X[N*N], Y[N*N], s[N][N];
bool f[N*N], g[N*N];
int main() {
	scanf("%d%d", &n, &m);
	for(int i=1; i<=n; ++i) for(int j=1; j<=m; ++j)
		scanf("%d", a[i]+j), b[i]=max(b[i], a[i][j]), c[j]=max(c[j], a[i][j]);
	for(int i=1; i<=n; ++i) f[b[i]]=1;
	for(int i=1; i<=m; ++i) g[c[i]]=1;
	for(int i=n*m, x=0, y=0, h=1; i; --i){
		x+=f[i], y+=g[i];
		if(f[i]||g[i]) s[x][y]=i; else s[X[h]][Y[h]]=i, ++h;
		if(f[i]) for(int j=y; --j;) X[++r]=x, Y[r]=j;
		if(g[i]) for(int j=x; --j;) X[++r]=j, Y[r]=y;
	}
	for(int i=1; i<=n; ++i) for(int j=1; j<=m; ++j) printf("%d%c", s[i][j], " \n"[j==m]);
	return 0;
}
