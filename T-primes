We know that prime numbers are positive integers that have exactly two distinct positive divisors. Similarly, we'll call a positive integer t Т-prime, if t has exactly three distinct positive divisors.

You are given an array of n positive integers. For each of them determine whether it is Т-prime or not.

Input
The first line contains a single positive integer, n (1 ≤ n ≤ 105), showing how many numbers are in the array. The next line contains n space-separated integers x i (1 ≤ x i ≤ 1012).

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is advised to use the cin, cout streams or the %I64d specifier.

Output
Print n lines: the i-th line should contain "YES" (without the quotes), if number x i is Т-prime, and "NO" (without the quotes), if it isn't.
SAmple input:
3
4 5 6
Sample output:
YES
NO
NO
The given test has three numbers. The first number 4 has exactly three divisors — 1, 2 and 4, thus the answer for this number is "YES". The second number 5 has two divisors (1 and 5), and the third number 6 has four divisors (1, 2, 3, 6), hence the answer for them is "NO".

Code:
#include<bits/stdc++.h>
using namespace std;
typedef unsigned long long ll;
 
#define N 10000001
ll arr[N];
set<ll> only_primes;
 
void modified_seive()
{
	for (ll i = 0; i < N; i++)
	{
		arr[i] = i;
	}
 
	arr[0] = arr[1] = -1;
	for (ll i = 2; i < N; i++)
	{
		if (arr[i] == i)
		{
			for (ll j = i * i ; j < N; j += i)
			{
				if (arr[j] == j)
				{
					arr[j] = i;
				}
			}
		}
	}
	for (int i = 0; i < N; i++)
	{
		if (arr[i] == i)
		{
			only_primes.insert(i);
		}
	}
}
 
 
 
bool isPerfectSquare(long double x)
{
	// Find floating point value of
	// square root of x.
	double sr = sqrt(x);
 
	// If square root is an integer
	return ((sr - floor(sr)) == 0);
}
 
int main()
{
#ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output1.txt", "w", stdout);
#endif
	modified_seive();
	/*for (int i = 0; i < 11; i++)
		cout << only_primes[i] << ",";*/
 
	// << sqrt(8);
 
	ll n;
	cin >> n;
	ll count = 0;
	for (ll i = 0; i < n; i++)
	{
		ll t;
		cin >> t;
		bool flag = isPerfectSquare(t);
 
		if (flag == false)
		{
			cout << "NO" << endl;
			continue;
		}
 
		if (only_primes.find(sqrt(t)) != only_primes.end())
		{
			//cout << *only_primes.find(sqrt(t));
			cout << "YES" << endl;
		}
		else
			cout << "NO" << endl;
 
	}
}
Input
2
48 49
Output
NO
YES
Input
10
10 9 8 7 6 5 4 3 2 1
Output
NO
YES
NO
NO
NO
NO
YES
NO
NO
NO
Input
1
36
Output
NO
Input
1
999966000289
Output
YES
Input
9
111 121 131 111 121 131 111 121 131
Output
NO
YES
NO
NO
YES
NO
NO
YES
NO
