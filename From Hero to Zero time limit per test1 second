You are given an integer n and an integer k.

In one step you can do one of the following moves:

decrease n by 1;
divide n by k if n is divisible by k.
For example, if n=27 and k=3 you can do the following steps: 27→26→25→24→8→7→6→2→1→0.

You are asked to calculate the minimum number of steps to reach 0 from n.

Input
The first line contains one integer t (1≤t≤100) — the number of queries.

The only line of each query contains two integers n and k (1≤n≤1018, 2≤k≤1018).

Output
For each query print the minimum number of steps to reach 0 from n in single line.
Sample input:
2
59 3
1000000000000000000 10
Sample output:
8
19
Steps for the first test case are: 59→58→57→19→18→6→2→1→0.

In the second test case you have to divide n by k 18 times and then decrease n by 1.

code:
#include<bits/stdc++.h>
using namespace std;
 int main()
 {
 int t;
 cin>>t;
 while(t--){
	long long int  n,k,a;
	cin>>n>>k;
	a=0;
	while(n>0){
		a+=n%k;
		n/=k;
		a++;
	}
	cout<<a-1<<endl;
 
 }
 }
Input
93
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
2 2
Output
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
Input
1
99 99
Output
2
Input
2
99 2
70 4
Output
10
7
Input
3
99 97
30 30
20 25
Output
4
2
20
Input
1
2 99
Output
2
 
