Recently, you found a bot to play "Rock paper scissors" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string s=s1s2…sn of length n where each letter is either R, S or P.

While initializing, the bot is choosing a starting index pos (1≤pos≤n), and then it can play any number of rounds. In the first round, he chooses "Rock", "Scissors" or "Paper" based on the value of spos:

if spos is equal to R the bot chooses "Rock";
if spos is equal to S the bot chooses "Scissors";
if spos is equal to P the bot chooses "Paper";
In the second round, the bot's choice is based on the value of spos+1. In the third round — on spos+2 and so on. After sn the bot returns to s1 and continues his game.

You plan to play n rounds and you've already figured out the string s but still don't know what is the starting index pos. But since the bot's tactic is so boring, you've decided to find n choices to each round to maximize the average number of wins.

In other words, let's suggest your choices are c1c2…cn and if the bot starts from index pos then you'll win in win(pos) rounds. Find c1c2…cn such that win(1)+win(2)+⋯+win(n)n is maximum possible.

Input
The first line contains a single integer t (1≤t≤1000) — the number of test cases.

Next t lines contain test cases — one per line. The first and only line of each test case contains string s=s1s2…sn (1≤n≤2⋅105; si∈{R,S,P}) — the string of the bot.

It's guaranteed that the total length of all strings in one test doesn't exceed 2⋅105.

Output
For each test case, print n choices c1c2…cn to maximize the average number of wins. Print them in the same manner as the string s.

If there are multiple optimal answers, print any of them.

Sample input:
3
RRRR
RSP
S
Sample output:
PPPP
RSP
R

Code:
t = int(input())
for _ in range(t):
    s = input()
    S_count = s.count("S")
    R_count = s.count("R")
    P_count = s.count("P")
    Max_count = max(S_count, R_count, P_count)
    if S_count == Max_count:
        print("R" * len(s))
    elif P_count == Max_count:
        print("S" * len(s))
    elif R_count == Max_count:
        print("P" * len(s))
 
