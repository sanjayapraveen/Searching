Bob decided that he will not waste his prime years implementing GUI forms for a large corporation and instead will earn his supper on the Stock Exchange Reykjavik. The Stock Exchange Reykjavik is the only actual stock exchange in the world. The only type of transaction is to take a single share of stock x and exchange it for a single share of stock y, provided that the current price of share x is at least the current price of share y.

There are 2n stocks listed on the SER that are of interest to Bob, numbered from 1 to 2n. Bob owns a single share of stocks 1 through n and would like to own a single share of each of n+1 through 2n some time in the future.

Bob managed to forecast the price of each stock — in time t≥0, the stock i will cost ai⋅⌊t⌋+bi. The time is currently t=0. Help Bob find the earliest moment in time in which he can own a single share of each of n+1 through 2n, and the minimum number of stock exchanges he has to perform in order to do that.

You may assume that the Stock Exchange has an unlimited amount of each stock at any point in time.

Input
The first line contains a single integer n (1≤n≤2200) — the number stocks currently owned by Bob.

Each of the next 2n lines contains integers ai and bi (0≤ai,bi≤109), representing the stock price of stock i.

Output
If it is impossible for Bob to achieve his goal, output a single integer −1.

Otherwise, output two integers T and E, where T is the minimum time in which he can achieve his goal, and E is the minimum number of exchanges in which he can achieve his goal at time T.
Code:
#include<queue>
#include<cstdio>
#include<vector>
#include<cstring>
#include<algorithm>
struct node{int u,v,f,c,p;node(int a=0,int b=0,int d=0,int e=0,int g=0):u(a),v(b),f(d),c(e),p(g){}};
using i64=long long;
using IT=std::vector<node>::iterator;
const int N=14007;
int n,s,t,dis[N],flow[N],inq[N];IT id[N];
struct line{int k,b,id;}a[N];
std::queue<int>q;std::vector<node>e[N];
int read(){int x;scanf("%d",&x);return x;}
int check(i64 t)
{
    static i64 r[N],s[N];memset(r+1,0,n<<3);
    for(int i=1;i<=n;++i) for(int j=1;j<=n+n;++j) if(a[i].b>=a[j].b) r[i]=std::max(r[i],t*a[j].k+a[j].b);
    for(int i=1;i<=n;++i) s[i]=t*a[n+i].k+a[n+i].b;
    std::sort(r+1,r+n+1),std::sort(s+1,s+n+1);
    for(int i=1;i<=n;++i) if(r[i]<s[i]) return 0;
    return 1;
}
void add(int u,int v,int f,int c){e[u].emplace_back(u,v,f,c,(int)e[v].size()),e[v].emplace_back(v,u,0,-c,(int)e[u].size()-1);}
int spfa()
{
    memset(dis,0x3f,sizeof dis),memset(flow,0x3f,sizeof flow),q.push(s),inq[s]=1,dis[s]=0,id[t]=e[t].begin();
    for(int u,v;!q.empty();)
    {
	u=q.front(),q.pop(),inq[u]=0;
	for(IT it=e[u].begin();it!=e[u].end();++it)
	    if(it->f&&dis[v=it->v]>dis[u]+it->c)
	    {
		dis[v]=dis[u]+it->c,id[v]=it,flow[v]=std::min(flow[u],it->f);
		if(!inq[v]) q.push(v),inq[v]=1;
	    }
    }
    return id[t]!=e[t].begin();
}
void build(i64 tim)
{
    s=6*n+1,t=6*n+2;
    for(int i=1;i<=n;++i) add(s,i+n*4,1,0),add(i+n*4,i,1,1),add(i+n*4,i+n+n,1,0),add(i+n*5,t,1,0),add(i+n*3,i+n*5,1,1),add(i+n,i+n*5,1,0);
    for(int i=1;i<=n+n;++i) add(i,i+n+n,10000,0);
    std::sort(a+1,a+n+n+1,[](line a,line b){return a.b>b.b;});
    for(int l=1,r;l<=n+n;l=r+1)
    {
	for(r=l;a[r+1].b==a[l].b;++r);
	for(int i=l;i<=r;++i) if(i<n+n) add(a[i].id,a[i+1].id,10000,0);
	add(a[r].id,a[l].id,10000,0);
    }
    std::sort(a+1,a+n+n+1,[&](line a,line b){return tim*a.k+a.b>tim*b.k+b.b;});
    for(int l=1,r;l<=n+n;l=r+1)
    {
	for(r=l;tim*a[r+1].k+a[r+1].b==tim*a[l].k+a[l].b;++r);
	for(int i=l;i<=r;++i) if(i<n+n) add(a[i].id+n+n,a[i+1].id+n+n,10000,0);
	add(a[r].id+n+n,a[l].id+n+n,10000,0);
    }
}
int EK()
{
    int ans=0;
    for(int p;spfa();) for(p=t,ans+=flow[t]*dis[t];p^s;p=id[p]->u) id[p]->f-=flow[t],e[p][id[p]->p].f+=flow[t];
    return ans;
}
int main()
{
    n=read();int ans=0;
    for(int i=1;i<=n+n;++i) a[i]={read(),read(),i};
    if(!check(1e9)) return !printf("-1");
    for(int l=0,r=1e9,mid;l<=r;) check(mid=(l+r)>>1)? (ans=mid,r=mid-1):(l=mid+1);
    build(ans),printf("%d %d",ans,EK());
}

	   	 	 	  	   	 	 			  		  		
