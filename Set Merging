You are given a permutation a1,a2,…,an of numbers from 1 to n. Also, you have n sets S1,S2,…,Sn, where Si={ai}. Lastly, you have a variable cnt, representing the current number of sets. Initially, cnt=n.

We define two kinds of functions on sets:

f(S)=minu∈Su;

g(S)=maxu∈Su.

You can obtain a new set by merging two sets A and B, if they satisfy g(A)<f(B) (Notice that the old sets do not disappear).

Formally, you can perform the following sequence of operations:

cnt←cnt+1;

Scnt=Su∪Sv, you are free to choose u and v for which 1≤u,v<cnt and which satisfy g(Su)<f(Sv).

You are required to obtain some specific sets.

There are q requirements, each of which contains two integers li,ri, which means that there must exist a set Ski (ki is the ID of the set, you should determine it) which equals {au∣li≤u≤ri}, which is, the set consisting of all ai with indices between li and ri.

In the end you must ensure that cnt≤2.2×106. Note that you don't have to minimize cnt. It is guaranteed that a solution under given constraints exists.

Input
The first line contains two integers n,q (1≤n≤212,1≤q≤216)  — the length of the permutation and the number of needed sets correspondently.

The next line consists of n integers a1,a2,⋯,an (1≤ai≤n, ai are pairwise distinct)  — given permutation.

i-th of the next q lines contains two integers li,ri (1≤li≤ri≤n), describing a requirement of the i-th set.

Output
It is guaranteed that a solution under given constraints exists.

The first line should contain one integer cntE (n≤cntE≤2.2×106), representing the number of sets after all operations.

cntE−n lines must follow, each line should contain two integers u, v (1≤u,v≤cnt′, where cnt′ is the value of cnt before this operation), meaning that you choose Su, Sv and perform a merging operation. In an operation, g(Su)<f(Sv) must be satisfied.

The last line should contain q integers k1,k2,⋯,kq (1≤ki≤cntE), representing that set Ski is the ith required set.

Please notice the large amount of output.

Examples
inputCopy
3 2
1 3 2
2 3
1 3
outputCopy
6
3 2
1 3
5 2
4 6 
inputCopy
2 4
2 1
1 2
1 2
1 2
1 1
outputCopy
5
2 1
2 1
2 1
5 3 3 1
Note
In the first sample:

We have S1={1},S2={3},S3={2} initially.

In the first operation, because g(S3)=2<f(S2)=3, we can merge S3,S2 into S4={2,3}.

In the second operation, because g(S1)=1<f(S3)=2, we can merge S1,S3 into S5={1,2}.

In the third operation, because g(S5)=2<f(S2)=3, we can merge S5,S2 into S6={1,2,3}.

For the first requirement, S4={2,3}={a2,a3}, satisfies it, thus k1=4.

For the second requirement, S6={1,2,3}={a1,a2,a3}, satisfies it, thus k2=6
Notice that unused sets, identical sets, outputting the same set multiple times, and using sets that are present initially are all allowed.
Code:
#include <bits/stdc++.h>

const int N(5000), M(3e6 + 10);
std::map<std::pair<int, int>, int> h[N << 2];
struct node { int l, r; } t[M];
std::vector<int> s[N << 2];
int n, Q, cur, a[N], id[N], ans[M];

void build(int x = 1, int l = 1, int r = n)
{
	for (int i = l; i <= r; i++) s[x].push_back(id[i]);
	std::sort(s[x].begin(), s[x].end()); if (l == r) return;
	int mid = (l + r) >> 1, ls = x << 1, rs = ls | 1;
	build(ls, l, mid), build(rs, mid + 1, r);
}

int Query(int ql, int qr, int x = 1)
{
	int l = std::lower_bound(s[x].begin(), s[x].end(), ql) - s[x].begin();
	int r = std::upper_bound(s[x].begin(), s[x].end(), qr) - s[x].begin() - 1;
	if (l > r) return 0; if (l == r) return s[x][l];
	int &p = h[x][std::make_pair(l, r)]; if (p) return p;
	int ls = x << 1, rs = ls | 1, pl = Query(ql, qr, ls), pr = Query(ql, qr, rs);
	if (!pl || !pr) return p = (pl | pr);
	else return p = ++cur, t[p] = (node) {pl, pr}, p;
}

int main()
{
	scanf("%d%d", &n, &Q), cur = n;
	for (int i = 1; i <= n; i++) scanf("%d", a + i), id[i] = i;
	std::sort(id + 1, id + n + 1, [] (int x, int y) { return a[x] < a[y]; }), build();
	for (int i = 1, l, r; i <= Q; i++) scanf("%d%d", &l, &r), ans[i] = Query(l, r);
	printf("%d\n", cur);
	for (int i = n + 1; i <= cur; i++) printf("%d %d\n", t[i].l, t[i].r);
	for (int i = 1; i <= Q; i++) printf("%d%c", ans[i], " \n"[i == Q]);
	return 0;
}
