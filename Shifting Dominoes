Bill likes to play with dominoes. He took an n×m board divided into equal square cells, and covered it with dominoes. Each domino covers two adjacent cells of the board either horizontally or vertically, and each cell is covered exactly once with a half of one domino (that is, there are no uncovered cells, and no two dominoes cover the same cell twice).

After that Bill decided to play with the covered board and share some photos of it on social media. First, he removes exactly one domino from the board, freeing two of the cells. Next, he moves dominoes around. A domino can only be moved along the line parallel to its longer side. A move in the chosen direction is possible if the next cell in this direction is currently free. Bill doesn't want to lose track of what the original tiling looks like, so he makes sure that at any point each domino shares at least one cell with its original position.

After removing a domino and making several (possibly, zero) moves Bill takes a photo of the board and posts it. However, with the amount of filters Bill is using, domino borders are not visible, so only the two free cells of the board can be identified. When the photo is posted, Bill reverts the board to its original state and starts the process again.

Bill wants to post as many photos as possible, but he will not post any photo twice. How many distinct photos can he take? Recall that photos are different if the pairs of free cells in the photos are different.

Input
The first line contains two positive integers n and m (nm≤2⋅105) — height and width of the board respectively.

The next n lines describe the tiling of the board, row by row from top to bottom. Each of these lines contains m characters, describing the cells in the corresponding row left to right. Each character is one of U, D, L, or R, meaning that the cell is covered with a top, bottom, left, or right half of a domino respectively.

It is guaranteed that the described tiling is valid, that is, each half-domino has a counterpart in the relevant location. In particular, since tiling is possible, the number of cells in the board is even.

Output
Print a single integer — the number of distinct photos Bill can take.

Examples
inputCopy
2 4
UUUU
DDDD
outputCopy
4
inputCopy
2 3
ULR
DLR
outputCopy
6
inputCopy
6 6
ULRUUU
DUUDDD
UDDLRU
DLRLRD
ULRULR
DLRDLR
outputCopy
133
Note
In the first sample case, no moves are possible after removing any domino, thus there are four distinct photos.

In the second sample case, four photos are possible after removing the leftmost domino by independently moving/not moving the remaining two dominoes. Two more different photos are obtained by removing one of the dominoes on the right.

Code:
#include<bits/stdc++.h>
#define lson (rt<<1)
#define rson (rt<<1|1)
#define pb push_back
using namespace std;const int N=2e5+7;
int t[N<<2],v[N<<2],n,m,rt[2][N],cur,i,j,x,y,z,c[N],L[N],R[N],tot,ind;vector<int>g[2][N];char s[N];long long ans;
void update(int rt,int l,int r){v[rt]=t[rt]?(r-l+1):(l==r?0:v[lson]+v[rson]);}
void modify(int rt,int l,int r,int a,int b,int val){
	if(a<=l&&r<=b){t[rt]+=val;return update(rt,l,r);}int mid=l+r>>1;
	if(a<=mid)modify(lson,l,mid,a,b,val);if(b>mid)modify(rson,mid+1,r,a,b,val);update(rt,l,r);
}
void dfs(int x){L[x]=++ind;for(auto&y:g[0][x])dfs(y);R[x]=ind;}
void go(int x){modify(1,1,tot,L[x],R[x],1);ans+=v[1];for(auto&y:g[1][x])go(y);modify(1,1,tot,L[x],R[x],-1);}
int main(){
	for(scanf("%d%d",&n,&m),i=0;i<n;++i)for(scanf("%s",s+i*m),j=0;j<m;++j){
		cur=i*m+j;
		if(s[cur]=='D')c[cur]=c[cur-m];else if(s[cur]=='R')c[cur]=c[cur-1];else
			c[cur]=++tot,rt[0][tot]=rt[1][tot]=1;
	}
	for(i=0;i<n*m;++i){
		x=i/m,y=i%m,z=(x+y)&1;
		if(x>0&&s[i-m]=='D'){g[z][c[i]].pb(c[i-m]);rt[z][c[i-m]]=false;}
		if(x+1<n&&s[i+m]=='U'){g[z][c[i]].pb(c[i+m]);rt[z][c[i+m]]=false;}
		if(y>0&&s[i-1]=='R'){g[z][c[i]].pb(c[i-1]);rt[z][c[i-1]]=false;}
		if(y+1<m&&s[i+1]=='L'){g[z][c[i]].pb(c[i+1]);rt[z][c[i+1]]=false;}
	}
	for(i=1;i<=tot;++i)if(rt[0][i])dfs(i);
	for(i=1;i<=tot;++i)if(rt[1][i])go(i);
	printf("%lld\n",ans);
	return 0;
}
