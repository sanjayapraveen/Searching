Consider a conveyor belt represented using a grid consisting of n rows and m columns. The cell in the i-th row from the top and the j-th column from the left is labelled (i,j).

Every cell, except (n,m), has a direction R (Right) or D (Down) assigned to it. If the cell (i,j) is assigned direction R, any luggage kept on that will move to the cell (i,j+1). Similarly, if the cell (i,j) is assigned direction D, any luggage kept on that will move to the cell (i+1,j). If at any moment, the luggage moves out of the grid, it is considered to be lost.

There is a counter at the cell (n,m) from where all luggage is picked. A conveyor belt is called functional if and only if any luggage reaches the counter regardless of which cell it is placed in initially. More formally, for every cell (i,j), any luggage placed in this cell should eventually end up in the cell (n,m).

This may not hold initially; you are, however, allowed to change the directions of some cells to make the conveyor belt functional. Please determine the minimum amount of cells you have to change.

Please note that it is always possible to make any conveyor belt functional by changing the directions of some set of cells.

Input
Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤10). Description of the test cases follows.

The first line of each test case contains two integers n,m (1≤n≤100, 1≤m≤100)  — the number of rows and columns, respectively.

The following n lines each contain m characters. The j-th character in the i-th line, ai,j is the initial direction of the cell (i,j). Please note that an,m= C.

Output
For each case, output in a new line the minimum number of cells that you have to change to make the conveyor belt functional.

Sample input:
4
3 3
RRD
DDR
RRC
1 4
DDDC
6 9
RDDDDDRRR
RRDDRRDDD
RRDRDRRDR
DDDDRDDRR
DRRDRDDDR
DDRDRRDDC
1 1
C
Sample output:
1
3
9
0
In the first case, just changing the direction of (2,3) to D is enough.

You can verify that the resulting belt is functional. For example, if we place any luggage at (2,2), it first moves to (3,2) and then to (3,3).

In the second case, we have no option but to change the first 3 cells from D to R making the grid equal to RRRC.

Code:
#include<bits/stdc++.h>
using namespace std;
 
void solve() {
    int n , m , i , j , ans = 0;
    cin >> n >> m;
    string s[n+1];
    for(i = 0 ; i < n ; i++) {
        cin >> s[i];
    }
    for(i = m-1 ; i >= 0 ; i--) {
        if(s[n-1][i] != 'C' && s[n-1][i] == 'D') 
            ans++;
    }
    for(i = 0 ; i < n ; i++) {
        if(s[i][m-1] != 'C' && s[i][m-1] == 'R') 
            ans++;
    }
    cout << ans << "\n";
}
 
int main() {
    long long int tc = 1;
    cin >> tc;
    while(tc-- > 0) {
        solve();
    }
}
Input
10
1 2
RC
1 2
DC
2 1
R
C
2 1
D
C
7 6
DRDDRR
RDDDRR
DRRRDD
RRDRRR
DDRRRR
RRDRDR
DDRDRC
8 5
DRDRD
DRRRR
RDRRD
DDDRR
RDDRR
RRDDD
DDRRR
DDDRC
8 3
DDD
DDR
DRD
RRR
DRR
DRD
RRR
RDC
6 6
DRDDDR
DDDRDR
RDDRRD
DRRRRR
RRRRRR
DRDRRC
6 8
RRDDDRRR
RDRDDRRR
DRRDRRRD
DRDRRDRR
DDDDDDDR
RRDRRDDC
7 9
RDDDDRDDR
DRRRRDRDR
DDRRDDDRR
DDDDDRDRR
DDRDRDDRR
DRRDDDDRD
DDDDRRRDC
Output
0
1
1
0
8
7
5
6
7
10
10
4 4
DDDD
DRDR
DRDD
DRRC
4 4
DDRR
DDRR
DDRD
DRRC
4 4
RRDR
DRRR
RRRR
DDRC
4 4
DRRR
RDDD
DDDR
RDRC
4 4
RDDD
RRDR
DDRD
DRRC
4 4
RDRR
RDRR
RDDR
RDDC
4 4
DRDD
DRRR
DDDD
DDRC
4 4
RDDR
RRRD
RRRR
RRRC
4 4
DRRR
RDRR
RDDD
RDRC
4 4
RRDR
DRRD
RRDR
DDDC
Output
2
3
5
3
2
5
3
2
3
5
Input
10
1 1
C
1 1
C
1 1
C
1 1
C
1 1
C
1 1
C
1 1
C
1 1
C
1 1
C
1 1
C
Output
0
0
0
0
0
0
0
0
0
0
Input
1
6 4
RRRR
RRRR
RRRR
RRRR
RRRR
RRRC
Output
5
